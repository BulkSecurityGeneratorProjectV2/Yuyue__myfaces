<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE project [
    <!ENTITY tomcat-build SYSTEM "file:../tomcat/tomcat-build.xmlf">
]>
<project name="myfaces-examples" default="run-examples">

    <property environment="env"/>

    <!-- Constants -->
    <property name="project.dir" location="${basedir}/../.."/>
    <property name="examples.dir" location="${project.dir}/webapps/examples"/>
    <property name="examples.src" location="${examples.dir}/src"/>
    <property name="examples.web" location="${examples.dir}/web"/>
    <property name="web-inf.classes.dir" location="${examples.web}/WEB-INF/classes"/>
    <property name="web-inf.lib.dir" location="${examples.web}/WEB-INF/lib"/>
    <property name="myfaces.doc" location="${project.dir}/doc"/>
    <property name="components_resource.src" location="${project.dir}/src/components_resource"/>

    <!-- Properties -->
    <property file="../build.local.properties"/>
    <property file="../build.default.properties"/>
    <property file="../manifest.properties"/>

    <!-- Temporary dir. May be overridden in build.local.properties -->
    <property name="temp.dir" location="${env.TEMP}"/>

    <!-- Tomcat -->
    <property name="tomcat.war.file" location="${temp.dir}/myfaces-examples.war"/>
    <property name="tomcat.context.path" value="/myfaces"/>


    <!-- classpath for compiling -->
    <path id="examples.class.path">
        <pathelement location="${servlet-jsp.jar}"/>
        <pathelement location="${jsp-2.0.jar}"/>
        <pathelement location="${jstl.jar}"/>
        <pathelement location="${myfaces.jar}"/>
        <pathelement location="${myfaces-jsf-api.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
    </path>


    <target name="run-examples"
            description="creates examples war and deploys it" >
        <ant dir="${project.dir}/build/examples-webapp" antfile="build.xml" target="-war" inheritall="false"/>
        <antcall target="tomcat-deploy-app"/>
        <echo message="browse to http://${tomcat.server}:${tomcat.port}${tomcat.context.path}"/>
    </target>

    <target name="clean"
            description="deletes all files that were built">
        <delete quiet="true" failonerror="false" includeEmptyDirs="true">
            <fileset file="${examples.web}/jscookmenu/**" excludes=".cvsignore,CVS" />
            <fileset dir="${web-inf.classes.dir}"/>
            <fileset dir="${web-inf.lib.dir}"/>
            <fileset file="${project.dir}/myfaces-*-examples.tgz"/>
            <fileset file="${examples.web}/WEB-INF/web.xml"/>
            <fileset file="${examples.web}/WEB-INF/faces-config.xml"/>
            <fileset file="${temp.dir}/myfaces-examples.war" />
        </delete>
    </target>


    <target name="-compile-and-copy-libs"
            depends="-myfaces-jar, -myfaces-jsf-api-jar, -copy-components-resource"
            description="compiles the examples java classes to WEB-INF/classes and copies all needed libs to WEB-INF/lib">
        <mkdir dir="${web-inf.classes.dir}"/>
        <javac srcdir="${examples.src}"
               destdir="${web-inf.classes.dir}"
               optimize="${javac.optimize}"
               debug="${javac.debug}"
               classpathref="examples.class.path">
        </javac>
        <copy todir="${web-inf.classes.dir}">
            <fileset dir="${examples.src}"
                     includes="**"
                     excludes="**/*.java
                               **/package.html"/>
        </copy>
    </target>

    <target name="-copy-components-resource">
        <copy todir="${examples.web}">
            <fileset dir="${components_resource.src}"
                     includes="**"
                     excludes="CVS" />
        </copy>
    </target>

    <target name="-war" depends="-compile-and-copy-libs">
        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd HH:mm" locale="en"/>
        </tstamp>
        <war destfile="${temp.dir}/myfaces-examples.war"
             webxml="${project.dir}/conf/web.xml">
            <manifest>
                <section name="${manifest.section}">
                    <attribute name="Implementation-Title" value="${manifest.impl.title}"/>
                    <attribute name="Implementation-Version" value="${manifest.impl.version} (${TODAY})"/>
                    <attribute name="Implementation-Vendor" value="${manifest.impl.vendor}"/>
                </section>
            </manifest>
            <lib file="${commons-codec.jar}"/>
            <lib file="${commons-el.jar}"/>
            <lib file="${commons-fileupload.jar}"/>
            <lib file="${commons-logging.jar}"/>
            <lib file="${commons-validator.jar}"/>
            <lib file="${commons-beanutils.jar}"/>
            <lib file="${commons-collections.jar}"/>
            <lib file="${commons-digester.jar}"/>            
            <lib file="${jakarta-oro.jar}"/>
            <lib file="${jsp-2.0.jar}"/>
            <lib file="${jstl.jar}"/>
            <lib file="${myfaces.jar}"/>
            <lib file="${myfaces-jsf-api.jar}"/>
            <lib file="${log4j.jar}"/>
            <classes dir="${web-inf.classes.dir}" />
            <fileset dir="${examples.web}"
                     excludes="WEB-INF/classes/**,
                               WEB-INF/lib/**,
                               WEB-INF/web.xml " />
        </war>
    </target>

    <target name="release"
            depends="-compile-and-copy-libs, -war"
            description="creates the examples release file myfaces-x.x.x-examples.tgz (don't forget to adjust manifest.properties!)">

        <tar destfile="${project.dir}/myfaces-${manifest.impl.version}-examples.tgz"
             compression="gzip">
            <tarfileset dir="${myfaces.doc}"
                        excludes="javadoc/**/*
                                  tlddoc/**/*"
                        prefix="myfaces-${manifest.impl.version}/doc"/>
            <tarfileset dir="${examples.src}"
                        excludes="commons-logging.properties,
                                  log4j.properties"
                        prefix="myfaces-${manifest.impl.version}/webapps/examples/src"/>
            <tarfileset dir="${examples.web}"
                        excludes="WEB-INF/classes/**/*,
                                  WEB-INF/lib/**/*"
                        prefix="myfaces-${manifest.impl.version}/webapps/examples/web"/>
            <tarfileset dir="${temp.dir}"
                        includes="myfaces-examples.war"
                        prefix="myfaces-${manifest.impl.version}"/>
        </tar>
    </target>



    <target name="prepare-for-debugging"
            depends="-myfaces-jar"
            description="compiles the examples java classes to WEB-INF/classes and copies all needed libs to WEB-INF/lib">
        <mkdir dir="${web-inf.classes.dir}"/>
        <javac srcdir="${examples.src}"
               destdir="${web-inf.classes.dir}"
               optimize="${javac.optimize}"
               debug="${javac.debug}"
               classpathref="examples.class.path">
        </javac>
        <copy todir="${web-inf.classes.dir}">
            <fileset dir="${examples.src}"
                     includes="**"
                     excludes="**/*.java
                               **/package.html"/>
        </copy>

        <mkdir dir="${web-inf.lib.dir}"/>
        <copy todir="${web-inf.lib.dir}">
            <fileset file="${myfaces.jar}"/>
            <fileset file="${myfaces-jsf-api.jar}"/>
            <fileset file="${commons-codec.jar}"/>
            <fileset file="${commons-logging.jar}"/>
            <fileset file="${log4j.jar}"/>
        </copy>

        <copy file="${project.dir}/conf/web.xml" todir="${examples.web}/WEB-INF" />

    </target>


    &tomcat-build;

    <target name="-myfaces-jar" description="create myfaces.jar if necessary" >
        <available file="${myfaces.jar}" property="myfaces.jar.available"/>
        <antcall target="-create-myfaces-jar"/>
    </target>

    <target name="-create-myfaces-jar" unless="myfaces.jar.available"
            description="creates myfaces.jar via main buildfile" >
        <ant dir="${project.dir}/build" antfile="build.xml" target="myfaces-jar" inheritall="false"/>
    </target>

    <target name="-myfaces-jsf-api-jar" description="create myfaces.jar if necessary" >
        <available file="${myfaces-jsf-api.jar}" property="myfaces.jar.available"/>
        <antcall target="-create-myfaces-jsf-api-jar"/>
    </target>

    <target name="-create-myfaces-jsf-api-jar" unless="myfaces.jar.available"
            description="creates myfaces-jsf-api.jar via main buildfile" >
        <ant dir="${project.dir}/build" antfile="build.xml" target="myfaces-jsf-api-jar" inheritall="false"/>
    </target>


</project>
