<?xml version="1.0"?>

<!--
This is a basic ant build file that can perform a so-called "bootstrap" build of any project.
The only requirement is that the project be checked in SVN and have its own build file.  Basically this will check out
the project (by specific version if desired) and run the appropriate build script.  The SVN client must also be available
through the system path.
-->
<project name="Bootstrap Build Script" default="nightly" basedir=".">

    <taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp"/>
    <taskdef name="sshexec" classname="org.apache.tools.ant.taskdefs.optional.ssh.SSHExec"/>
    <taskdef name="svn-checkout" classname="com.alternatecomputing.jsvn.ant.SvnCheckout"/>
    <taskdef name="svn-update" classname="com.alternatecomputing.jsvn.ant.SvnUpdate"/>
    <taskdef name="svn-commit" classname="com.alternatecomputing.jsvn.ant.SvnCommit"/>
    <taskdef name="svn-add" classname="com.alternatecomputing.jsvn.ant.SvnAdd"/>

    <!-- use properties file to determine cvs configuration info -->
    <property file="bootstrap.properties"/>
    <property file="bootstrap.properties.local"/>
    <property name="build.dir" value="${basedir}/${code.checkout.dir}/build"/>
    <property name="temp.dir" value="${build.dir}/temp"/>

    <target name="prepare">

        <!-- make sure project.name property was set (externally) -->
        <fail unless="project.name">
            The project.name property must be set.  (ex. ant -buildfile bootstrap.xml -Dproject.name=cdrh-commons)
        </fail>

        <!-- use latest version if version is not specified -->
        <!--
        <condition property="svn.tag" value="trunk">
            <and>
                <not>
                    <isset property="build.version"/>
                </not>
            </and>
        </condition>
        <condition property="svn.tag" value="tags/rel_${build.version}">
            <and>
                <isset property="build.version"/>
            </and>
        </condition>
        -->
        
        <!-- determine if the files have been checked out already -->
        <available file="${code.checkout.dir}" type="dir" property="code.already.checked.out"/>
        <available file="${site.checkout.dir}" type="dir" property="site.already.checked.out"/>

        <!-- classpath for <javadoc> -->
        <path id="doclet.classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
                <include name="*.JAR"/>
            </fileset>
        </path>

    </target>

    <target name="clean" description="Remove everything generated from previous builds of the same project">
        <delete dir="${code.checkout.dir}"/>
        <delete dir="${site.checkout.dir}"/>
    </target>

    <target name="svn-checkout-code" depends="prepare" unless="code.already.checked.out">
        <svn-checkout repositoryUrl="${svn.repository}/${code.project.name}" destination="${code.checkout.dir}"/>
    </target>

    <target name="svn-update-code" depends="prepare" if="code.already.checked.out">
        <svn-update repositoryUrl="${svn.repository}/${code.project.name}" target="${code.checkout.dir}"/>
    </target>

    <target name="svn-checkout-site" depends="prepare" unless="site.already.checked.out">
        <svn-checkout repositoryUrl="${svn.repository}/${site.project.name}" destination="${site.checkout.dir}"/>
    </target>

    <target name="svn-update-site" depends="prepare" if="site.already.checked.out">
        <svn-update repositoryUrl="${svn.repository}/${site.project.name}" target="${site.checkout.dir}"/>
    </target>

    <target name="nightly" depends="svn-checkout-code,svn-update-code">
        
        <echo message="build.dir: ${build.dir}"/>
        <echo message="building nigthly for ${project.name} ..." level="debug"/>

        <!-- create new directory for nightly buld output -->
        <tstamp>
            <format property="TODAY" pattern="yyyyMMdd" locale="en"/>
        </tstamp>
        <property name="release.version" value="${TODAY}"/>
        <property name="release.dir" value="${build.dir}/nightly/${TODAY}"/>
        <echo message="build output directory: ${release.dir}"/>
        <mkdir dir="${release.dir}"/>

        <!-- execute the nightly build file that was just checked out -->
        <ant dir="${build.dir}" target="release" inheritRefs="true"/>

        <!-- publish the nightly bundles -->
        <scp todir="${apache.username}:${apache.password}@cvs.apache.org:/www/cvs.apache.org/builds/myfaces/nightly" trust="yes">
            <fileset dir="${release.dir}" excludes="**/*.sh"/>
        </scp>

    </target>

    <target name="release" depends="check,svn-checkout-code,svn-update-code">

        <echo message="build.dir: ${build.dir}"/>
        <echo message="building release for ${project.name} ..." level="debug"/>

        <property name="release.dir" value="${build.dir}/release"/>
        <echo message="build output directory: ${release.dir}"/>
        <mkdir dir="${release.dir}"/>

        <!-- execute the build file that was just checked out -->
        <ant dir="${build.dir}" target="release" inheritRefs="true"/>

        <!-- copy files to local release dir -->
        <copy todir="${release.dir}">
            <fileset dir="${release.dir}"/>
        </copy>

    </target>
    
    <target name="publish-site"><!-- depends="svn-checkout-code,svn-update-code,svn-checkout-site,svn-update-site">-->
        
        <property name="site.build.dir" value="${basedir}/${site.checkout.dir}"/>
        <property name="project.home" value="${basedir}/${code.checkout.dir}"/>
        
        <echo message="site.build.dir: ${site.build.dir}"/>
        
        <!-- execute the build file that was just checked out -->
        <ant dir="${build.dir}" target="site" inheritRefs="true"/>        
        
    </target>

    <target name="check">
        <!-- make sure build.version property was set (externally) -->
        <fail unless="build.version">
            The build.version property must be set.  (ex. ant -buildfile bootstrap.xml -Dbuild.version=1_0_9 clean release)
        </fail>
        <!-- make sure user specified a release directory on their local machine (externally) -->
        <fail unless="release.dir">
            The release.dir property must be set (use command line or bootstrap.local.properies.)
        </fail>
    </target>

</project>
